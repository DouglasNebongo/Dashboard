name: Deploy to Droplet
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: fermatd/dashboard
      CONTAINER_NAME: dashboard-container # Note: With docker compose, the container name will be different, e.g., dashboard-app-1
      REMOTE_PATH: /dashboard # The target directory on the droplet

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Add this step to transfer docker-compose.yml ---
      - name: Copy docker-compose.yml to Droplet
        uses: appleboy/scp-action@v0.1.4 # Use the SCP action
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml" # The path to your docker-compose.yml in your GitHub repo
          target: "${{ env.REMOTE_PATH }}/" # The target directory on the droplet (/dashboard/)

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          build-args: |
              # ... your existing build args here, including all the ones we added previously ...
              GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
              GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
              UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
              UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
              NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
              NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
              POSTGRES_URL=${{ secrets.POSTGRES_URL }}
              SKIP_REDIS_CONNECTION=true
              EMAIL_SERVER_HOST=${{ secrets.EMAIL_SERVER_HOST }}
              EMAIL_SERVER_PORT=${{ secrets.EMAIL_SERVER_PORT }}
              EMAIL_SERVER_USER=${{ secrets.EMAIL_SERVER_USER }}
              EMAIL_SERVER_PASSWORD=${{ secrets.EMAIL_SERVER_PASSWORD }}
              EMAIL_FROM=${{ secrets.EMAIL_FROM }}
              UPSTASH_REDIS_HOST=${{ secrets.UPSTASH_REDIS_HOST }}
              UPSTASH_REDIS_PORT=${{ secrets.UPSTASH_REDIS_PORT }}
              UPSTASH_REDIS_PASSWORD=${{ secrets.UPSTASH_REDIS_PASSWORD }}
              NEXT_PUBLIC_EXCHANGE_RATE_API_KEY=${{ secrets.NEXT_PUBLIC_EXCHANGE_RATE_API_KEY }}


      - name: SSH to Droplet & Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # --- Modify the script to use docker compose ---
          script: |
            set -euo pipefail

            # Change directory to where docker-compose.yml and .env are located
            cd ${{ env.REMOTE_PATH }} # This is /dashboard/

            echo "Writing .env file…"
            # Write the .env file content directly in the /dashboard/ directory
            cat > .env <<'EOF'
            # --- Your .env content goes here ---
            # Ensure DATABASE_URL and POSTGRES_URL point to 'db'
            # Ensure POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB are present for db service
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} # Keep if your app uses this alias
            POSTGRES_USER=postgres
            POSTGRES_DB=myprismadb
            DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@db:5432/myprismadb?schema=public
            POSTGRES_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@db:5432/myprismadb?schema=public

            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} # Ensure secret has a valid URL value
            EMAIL_SERVER_HOST=${{ secrets.EMAIL_SERVER_HOST }}
            EMAIL_SERVER_PORT=${{ secrets.EMAIL_SERVER_PORT }}
            EMAIL_SERVER_USER=${{ secrets.EMAIL_SERVER_USER }}
            EMAIL_SERVER_PASSWORD=${{ secrets.EMAIL_SERVER_PASSWORD }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
            UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
            UPSTASH_REDIS_HOST=${{ secrets.UPSTASH_REDIS_HOST }}
            UPSTASH_REDIS_PORT=${{ secrets.UPSTASH_REDIS_PORT }}
            UPSTASH_REDIS_PASSWORD=${{ secrets.UPSTASH_REDIS_PASSWORD }}
            NEXT_PUBLIC_EXCHANGE_RATE_API_KEY=${{ secrets.NEXT_PUBLIC_EXCHANGE_RATE_API_KEY }}
            EOF


            echo "Stopping and removing old Docker Compose services…"
            # Use docker compose to stop and remove services
            # Use -f to specify the compose file if not in the current dir (though cd takes care of this)
            # Use --timeout 30 (or similar) if graceful shutdown takes time
            docker compose down --remove-orphans -v # -v also removes volumes defined in compose file (like postgres_data)

            echo "Pulling the latest Docker image for the app service…"
            # Pull the image defined in the docker-compose.yml for the 'app' service
            docker compose pull app


            echo "Starting services using Docker Compose…"
            # Start services defined in docker-compose.yml in detached mode
            # --build if you want to build on the droplet (generally not recommended)
            # --force-recreate if you want to force recreation even if config hasn't changed
            docker compose up -d
            # The depends_on and healthcheck in the compose file will handle the app waiting for the db
            
            echo "Waiting for database service to be healthy..."
            # Wait for the db service to reach the 'healthy' state before proceeding
            # This command requires docker compose version 1.27.0+ or docker compose plugin
            
              # --- MANUAL WAIT LOOP FOR DB HEALTH ---
            echo "Waiting for database service to be healthy using manual check..."
            HEALTH_CHECK_TIMEOUT=120 # Total time to wait in seconds (e.g., 2 minutes)
            WAIT_INTERVAL=5 # How often to check the status in seconds
            ELAPSED_TIME=0
            DB_STATUS=""

            while [ "$DB_STATUS" != "healthy" ] && [ $ELAPSED_TIME -lt $HEALTH_CHECK_TIMEOUT ]; do
              # Get the service state (healthy, starting, running, exited, etc.)
              # Redirect stderr to /dev/null in case the service isn't listed initially
              DB_STATUS=$(docker compose ps db --format "{{.State}}" 2>/dev/null || echo "not_running")

              if [ "$DB_STATUS" = "healthy" ]; then
                echo "Database service is healthy."
                break # Exit the loop
              elif [ "$DB_STATUS" = "running" ] || [ "$DB_STATUS" = "starting" ]; then
                echo "Database service is still starting or running (${DB_STATUS}). Waiting ${WAIT_INTERVAL}s..."
              elif [ "$DB_STATUS" = "not_running" ] || [ "$DB_STATUS" = "exited" ]; then
                 echo "Database service is not running or exited (${DB_STATUS}). Aborting."
                 exit 1 # Exit script with error
              else
                echo "Unknown database service state: ${DB_STATUS}. Waiting ${WAIT_INTERVAL}s..."
              fi

              sleep $WAIT_INTERVAL
              ELAPSED_TIME=$((ELAPSED_TIME + WAIT_INTERVAL))
            done

            # Check if the loop finished because of a timeout
            if [ "$DB_STATUS" != "healthy" ]; then
              echo "Database service did not become healthy within ${HEALTH_CHECK_TIMEOUT} seconds. Aborting."
              exit 1 # Exit script with error
            fi
            # --- END MANUAL WAIT LOOP ---

            echo "Running Prisma migrations..."
            # Execute the migrate deploy command inside the running app container
            # 'app' is the service name in docker-compose.yml
            # This command needs to find the prisma directory and node_modules inside the container
            docker compose exec app npx prisma migrate deploy

            echo "Deployment complete."